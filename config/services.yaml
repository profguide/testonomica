# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
  app.default_locale: ru
#  app.supported_locales: en|ru

services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
    bind:
      $locale: "@=service('request_stack').getCurrentRequest().getLocale()"

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../src/'
    exclude:
      - '../src/DependencyInjection/'
      - '../src/Entity/'
      - '../src/Kernel.php'
      - '../src/Tests/'

  # controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
  App\Controller\:
    resource: '../src/Controller/'
    tags: [ 'controller.service_arguments' ]

  # Locale for request
  App\Event\LocaleRequestListener:
    tags:
      - { name: kernel.event_listener, event: kernel.request }

  # Locale as Service
  # add to nginx config: fastcgi_param lang "en";
#  App\i18\Locale:
#    arguments: [ "@=service('request_stack').getCurrentRequest().getLocale()" ]

  # add more service definitions when explicit configuration is needed
  # please note that last definitions always *replace* previous ones

  #    answer-service:
  #      class: \App\Service\TestAnswerService
  #    App\Repository\AnswerRepository:
  #      public: true
  App\Repository\SourceRepositoryInterface: '@App\Repository\SmartSourceRepository'
  App\Service\AnswerService:
    public: true
  App\Service\ResultService:
    public: true